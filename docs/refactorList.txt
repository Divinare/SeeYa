###############################################################################################

TODO REFACTOR LIST

###############################################################################################

helper.sendErr(res, 401, {"message": 'Not authorized'});

could be called with:
helper.sendErr(res, 401, "Not authorized"]);

AND in sendErr, we should send to UI: {"error": 'Not authorized'}

### AFTER THIS:

UTILS.rest.editEntry('user', this.props.user.id, userData, success, capsule(error));

this capsule method could test if object with {"error": "something"} exists and if so, it could display error notification to the user

################################################################################################

Anywhere where we have something like:
if( jqXhr.responseJSON.errors.userRepeatPassword != null && jqXhr.responseJSON.errors.userRepeatPassword.length > 0){
    frontValidator.setErrorToField('#repeatPassword', jqXhr.responseJSON.errors.userRepeatPassword, '#repeatPasswordError');
}

we could just call:
frontValidator.setErrorToField('#repeatPassword', jqXhr.responseJSON.errors.userRepeatPassword, '#repeatPasswordError');

AND inside setErrorToField, we should check if that errors given was != null or undefined or w/e. We should definitely capsule this one out.

################################################################################################


