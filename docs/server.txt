Server ip: 37.139.24.156

CONNECT:
The following command assumes that you have a private key called seeya in the same folder where you are running
the command from. The public key has to be configured to the server.

ssh -i seeya general@37.139.24.156

if you want to use the default key (id_rsa), you can just use this command

ssh general@37.139.24.156


HOW TO START THE APP ON THE SERVER:
- When the server reboots it should automatically restart the app. If this doesn't happen or you have to start or stop the app when you are doing an upgrade for example you can use the following commands (notice that you might need to run the commands from the EventMeetup folder, not sure if it is necessary):

pm2 start gulp
Starts the app. If this is not working and says that gulpfile cannot be found you can run pm2 delete <id> (see below), and try to start again. After starting the app you should run pm2 save, this will tell pm2 to restart all the processes currently ran by pm2 on server reboot.

pm2 list 
This command will show the processes that have been started by using pm2 (a program we use to manage running our app). So if you ran the pm2 start gulp first, you should now see something like this:

        ┌──────────┬────┬──────┬──────┬────────┬─────────┬────────┬──────────────┬──────────┐                    │ App name │ id │ mode │ pid  │ status │ restart │ uptime │ memory       │ watching │                    ├──────────┼────┼──────┼──────┼────────┼─────────┼────────┼──────────────┼──────────┤                    │ gulp     │ 0  │ fork │ 1096 │ online │ 0       │ 11h    │ 134.199 MB   │ disabled │                    └──────────┴────┴──────┴──────┴────────┴─────────┴────────┴──────────────┴──────────┘    
In the id column you see the id used by pm2 to identify the process.

pm2 stop <id>
Can be used to stop the app. The id part of the command is the id you see when you run pm2 list. So usually pm2 stop 0 should stop our app since we don't at least currently use pm2 for anything else. 

pm2 delete <id>
Will remove process from pm2 list. You might need this command sometimes if pm2 start gulp is not working properly

pm2 logs
See the logs of processes currently managed by pm2

More info for example here: http://pm2.keymetrics.io/docs/usage/quick-start/ and in google!







USERS: root, general
The password for the general user is seeyaServer0104 (in case you need to do commands that need super user privileges)

ssh access to root account has been disabled for security reasons according to the instructions here:
https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-14-04
the user general can use commands that need super user privileges by using sudo before the command.

NOTICE:
- About ram: The current server only has 512 mb ram available. If this does not seem to be enough, there are two things we can do:
    1. Upgrade to bigger server, the next tier is 10 dollars (plus VAT)/month with 1gb of ram. If we do a flexible upgrade, we can later go back to the cheaper server. This is what has been done once already.
    2. It is also possible to create a swap file for the server. This can be used when we run out of ram. There are some caveats using that on ssd drives, which is what digital ocean uses so they do not recommend it.

    The server ran out of ram when I had cloned the project and tried to do npm install. This might not be a problem in the future since there are less node modules to install, but if it becomes a problem we should consider option 1 or 2.

- About the server configuration. The server has a nginx reverse proxy installed. This means that our users connect to nginx and nginx forwards the connections to our app in port 1337. The configuration has been done according to instructions here: https://www.digitalocean.com/community/tutorials/how-to-set-up-a-node-js-application-for-production-on-ubuntu-14-04
Config file for nginx can be found from /etc/nginx/sites-available/default

- Postgres:
The configuration is currently so that local connections have peer authentication. This works if you add the user who runs the project (in the production server user 'general') a password and put in the project's file configuration/config.json the password to equal the password you set and the username to equal the username (in this case 'general'). The password for postgres can be set like this: ALTER USER general WITH PASSWORD 'test';. Currently the password is test, but should of course be set to something more secure.

TODO:
- We should probably enable https and we might need an ssl certificate for that. Instructions can be found from here: https://www.digitalocean.com/community/tutorials/how-to-install-an-ssl-certificate-from-a-commercial-certificate-authority
We should be able to get a certificate for free for a year from namecheap with the student developer pack.



